#********************************************************************
# Wrapper License Properties (Ignored by Community Edition)
#********************************************************************
# Include file problems can be debugged by removing the first '#'
#  from the following line:
##include.debug
#include ../conf/wrapper-license.conf

#********************************************************************
# Wrapper Java Properties
#********************************************************************
# Java Application
wrapper.java.command=${javaCommand}

# Tell the Wrapper to log the full generated Java command line.
#wrapper.java.command.loglevel=INFO

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=${wrapperListener}

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
[#list classpathElements as classpathElement]
wrapper.java.classpath.${classpathElement_index + 1}=../lib/${classpathElement}
[/#list]

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=../lib

# Java Bits.  On applicable platforms, tells the JVM to run in 32 or 64-bit mode.
wrapper.java.additional.auto_bits=TRUE

# If a 'umask' has been specified
[#if umask?exists]
wrapper.java.umask=${umask}
[/#if]

# Java Additional Parameters
[#list jvmArgs as jvmArg]
wrapper.java.additional.${jvmArg_index + 1}=${jvmArg}
[/#list]

# Initial Java Heap Size (in MB)
[#if jvmInitMemoryMB?exists]
wrapper.java.initmemory=${jvmInitMemoryMB?c}
[/#if]

# Maximum Java Heap Size (in MB)
[#if jvmMaxMemoryMB?exists]
wrapper.java.maxmemory=${jvmMaxMemoryMB?c}
[/#if]

# Application parameters.  Add parameters as needed starting from 1
[#list appParameters as appParameter]
wrapper.app.parameter.${appParameter_index + 1}=${appParameter}
[/#list]

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Enables Debug output from the Wrapper.
# wrapper.debug=TRUE

# Format of output for the console.  (See docs for formats)
wrapper.console.format=PM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=../logs/wrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=0

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=0

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper General Properties
#********************************************************************
# Allow for the use of non-contiguous numbered properties
wrapper.ignore_sequence_gaps=TRUE

# Title to use when running as a console
wrapper.console.title=${applicationLongName}

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.ntservice.name=${applicationName}

# Display name of the service
wrapper.ntservice.displayname=${applicationLongName}

# Description of the service
wrapper.ntservice.description=${applicationDescription}

# Service dependencies.  Add dependencies as needed starting from 1
[#list serviceDependencies as serviceDependency]
wrapper.ntservice.dependency.${serviceDependency_index + 1}=${serviceDependency}
[/#list]

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

# If a 'runAs' user exists
[#if runAs?exists]
wrapper.ntservice.account=${runAs}
[/#if]

# If 'withPassword' exists
[#if withPassword?exists]
wrapper.ntservice.password=${withPassword}
[/#if]

